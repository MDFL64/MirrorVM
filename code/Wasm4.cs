using MirrorVM;
using System;
using System.Diagnostics;
using System.Text;

namespace Sandbox;

public sealed class Wasm4 : Component
{
	WasmModule Module;
	WasmInstance Instance;
	ICallable Start;
	ICallable Update;

	Texture Screen;
	byte[] ScreenBuffer = new byte[160 * 160 * 3];

	Frame CallFrame = new Frame( 0 );

	const int WIDTH = 160;
	const int HEIGHT = 160;

	const int BLIT_2BPP = 1;
	const int BLIT_FLIP_X = 2;
	const int BLIT_FLIP_Y = 4;
	const int BLIT_ROTATE = 8;

	protected override void OnStart()
	{
		var file = FileSystem.Mounted.OpenRead( "minesweeper.wasm" );

		var imports = new ImportTable();

		imports.Register("env","diskr",new FunctionType( [ValType.I32,ValType.I32], [ValType.I32] ), new FunctionWrapper( ( frame, instance ) => {
			long ptr = frame[1];
			long length = frame[2];

			Log.Info( "attempt to read disk " + ptr + " " + length );

			// return
			frame[0] = 0;
		}));

		imports.Register( "env", "diskw", new FunctionType( [ValType.I32, ValType.I32], [ValType.I32] ), new FunctionWrapper( ( a, b ) => {
			throw new Exception( "diskw" );
		} ) );

		imports.Register( "env", "vline", new FunctionType( [ValType.I32, ValType.I32, ValType.I32], [] ), new FunctionWrapper( ( frame, instance ) => {
			int a = (int)frame[0];
			int b = (int)frame[1];
			int c = (int)frame[2];
			//Log.Info( "vline " + a + " " + b + " " + c );
		} ) );

		imports.Register( "env", "hline", new FunctionType( [ValType.I32, ValType.I32, ValType.I32], [] ), new FunctionWrapper( ( frame, instance ) => {
			int a = (int)frame[0];
			int b = (int)frame[1];
			int c = (int)frame[2];
			//Log.Info( "hline " + a + " " + b + " " + c );
		} ) );

		imports.Register( "env", "rect", new FunctionType( [ValType.I32, ValType.I32, ValType.I32, ValType.I32], [] ), new FunctionWrapper( ( a, b ) => {
			//Log.Info( "rect" );
		} ) );

		imports.Register( "env", "blitSub", new FunctionType( [ValType.I32, ValType.I32, ValType.I32, ValType.I32, ValType.I32, ValType.I32, ValType.I32, ValType.I32, ValType.I32], [] ), new FunctionWrapper( ( a, b ) => {
			throw new Exception( "blitSub" );
		} ) );

		imports.Register( "env", "textUtf8", new FunctionType( [ValType.I32, ValType.I32, ValType.I32, ValType.I32], [] ), new FunctionWrapper( ( frame, instance ) => {
			int ptr = (int)frame[0];
			int length = (int)frame[1];
			int x = (int)frame[2];
			int y = (int)frame[3];

			int currentX = x;
			for ( int ii = 0; ii < length; ii++ )
			{
				byte charCode = instance.Memory[ptr + ii];
				if ( charCode == 0 )
				{
					return;
				}
				else if ( charCode == 10 )
				{
					y += 8;
					currentX = x;
				}
				else if ( charCode >= 32 && charCode <= 255 )
				{
					Blit( FONT, currentX, y, 8, 8, 0, (charCode - 32) << 3, 8 );
					currentX += 8;
				}
				else
				{
					currentX += 8;
				}
			}
		} ) );

		var module = new WasmModule( file, imports );
		Instance = new WasmInstance( module );

		Start = module.GetFunction( "start", new FunctionType( [], [] ) );
		Update = module.GetFunction( "update", new FunctionType( [], [] ) );

		var frame = new Frame(0);

		Start.Call( CallFrame, Instance );

		Screen = Texture.Create( 160, 160, ImageFormat.RGB888 ).Finish();
	}

	protected override void OnUpdate()
	{
		var t = Stopwatch.StartNew();
		var mem = Instance.Memory;
		for (int i=0;i<6400;i++ )
		{
			mem[0xA0 + i] = 0;
		}

		Update.Call( CallFrame, Instance );

		// memory may have grown
		mem = Instance.Memory;

		Color32 color1 = new Color32( mem[6], mem[5], mem[4] );
		Color32 color2 = new Color32( mem[10], mem[9], mem[8] );
		Color32 color3 = new Color32( mem[14], mem[13], mem[12] );
		Color32 color4 = new Color32( mem[18], mem[17], mem[16] );

		for ( int y = 0; y < 160; y++ )
		{
			for ( int x = 0; x < 40; x++ )
			{
				int fb_addr = 0xA0 + (x + y * 40);
				byte fb_byte = mem[fb_addr];

				int out_index = (x + y * 40) * 4 * 3;

				int a = fb_byte & 3;
				int b = (fb_byte >> 2) & 3;
				int c = (fb_byte >> 4) & 3;
				int d = fb_byte >> 6;

				ScreenWritePixel( out_index, a, color1, color2, color3, color4 );
				ScreenWritePixel( out_index + 3, b, color1, color2, color3, color4 );
				ScreenWritePixel( out_index + 6, c, color1, color2, color3, color4 );
				ScreenWritePixel( out_index + 9, d, color1, color2, color3, color4 );

				//int out_index = (x + y * 160) * 3;
				//ScreenBuffer[out_index] = 255;
			}
		}

		Screen.Update( ScreenBuffer );
		Log.Info( "? " + t.ElapsedMilliseconds );

		Scene.Camera.Hud.DrawTexture(Screen, new Rect(80,80,320,320));
	}

	private void ScreenWritePixel(int index, int c, Color32 color1, Color32 color2, Color32 color3, Color32 color4 )
	{
		Color32 color = c switch
		{
			0 => color1,
			1 => color2,
			2 => color3,
			3 => color4,
			_ => throw new Exception()
		};

		ScreenBuffer[index] = color.r;
		ScreenBuffer[index+1] = color.g;
		ScreenBuffer[index+2] = color.b;
	}

	private void Blit(
		Span<byte> sprite,
		int dstX, int dstY, int width, int height,
		int srcX, int srcY, int srcStride, int flags = 0)
	{
		int drawColors = Instance.Memory[0x14] | (Instance.Memory[0x15] << 8);

		bool rotate = (flags & BLIT_ROTATE) != 0;
		bool flipX = (flags & BLIT_FLIP_X) != 0;
		bool flipY = (flags & BLIT_FLIP_Y) != 0;
		bool bpp2 = (flags & BLIT_2BPP) != 0;

		int clipXMin, clipYMin, clipXMax, clipYMax;
		if ( rotate )
		{
			flipX = !flipX;
			clipXMin = Math.Max( 0, dstY ) - dstY;
			clipYMin = Math.Max( 0, dstX ) - dstX;
			clipXMax = Math.Min( width, HEIGHT - dstY );
			clipYMax = Math.Min( height, WIDTH - dstX );
		}
		else
		{
			clipXMin = Math.Max( 0, dstX ) - dstX;
			clipYMin = Math.Max( 0, dstY ) - dstY;
			clipXMax = Math.Min( width, WIDTH - dstX );
			clipYMax = Math.Min( height, HEIGHT - dstY );
		}

		for ( int y = clipYMin; y < clipYMax; y++ )
		{
			for ( int x = clipXMin; x < clipXMax; x++ )
			{
				// Calculate sprite target coords
				int tx = dstX + (rotate ? y : x);
				int ty = dstY + (rotate ? x : y);

				// Calculate sprite source coords
				int sx = srcX + (flipX ? width - x - 1 : x);
				int sy = srcY + (flipY ? height - y - 1 : y);

				// Sample the sprite to get a color index
				int colorIdx;
				int bitIndex = sy * srcStride + sx;
				if ( bpp2 )
				{
					byte b = sprite[bitIndex >>> 2];
					int shift = 6 - ((bitIndex & 0x03) << 1);
					colorIdx = (b >>> shift) & 0b11;
				}
				else
				{
					byte b = sprite[bitIndex >>> 3];
					int shift = 7 - (bitIndex & 0x7);
					colorIdx = (b >>> shift) & 0b1;
				}

				// Get the final color using the drawColors indirection
				// TODO(2021-08-11): Use a lookup table here?
				int dc = (drawColors >>> (colorIdx << 2)) & 0x0f;
				if ( dc != 0 )
				{
					this.SetPixel( (dc - 1) & 0x03, tx, ty );
				}
			}
		}
	}

	private void SetPixel(int dc, int tx, int ty)
	{
		//dc = 1;

		int byte_index = (tx >> 2) + ty * (WIDTH / 4);
		int bit_index = (tx & 3) << 1;
		byte old = Instance.Memory[0xA0 + byte_index];

		//byte mask = 3 << bit_index;

		Instance.Memory[0xA0 + byte_index] = (byte)(old | (dc << bit_index));
	}

	static byte[] FONT = [
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xc7, 0xc7, 0xc7, 0xcf, 0xcf, 0xff, 0xcf, 0xff,
		0x93, 0x93, 0x93, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x93, 0x01, 0x93, 0x93, 0x93, 0x01, 0x93, 0xff,
		0xef, 0x83, 0x2f, 0x83, 0xe9, 0x03, 0xef, 0xff,
		0x9d, 0x5b, 0x37, 0xef, 0xd9, 0xb5, 0x73, 0xff,
		0x8f, 0x27, 0x27, 0x8f, 0x25, 0x33, 0x81, 0xff,
		0xcf, 0xcf, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xf3, 0xe7, 0xcf, 0xcf, 0xcf, 0xe7, 0xf3, 0xff,
		0x9f, 0xcf, 0xe7, 0xe7, 0xe7, 0xcf, 0x9f, 0xff,
		0xff, 0x93, 0xc7, 0x01, 0xc7, 0x93, 0xff, 0xff,
		0xff, 0xe7, 0xe7, 0x81, 0xe7, 0xe7, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xcf, 0x9f,
		0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xcf, 0xff,
		0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 0xff,
		0xc7, 0xb3, 0x39, 0x39, 0x39, 0x9b, 0xc7, 0xff,
		0xe7, 0xc7, 0xe7, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0x83, 0x39, 0xf1, 0xc3, 0x87, 0x1f, 0x01, 0xff,
		0x81, 0xf3, 0xe7, 0xc3, 0xf9, 0x39, 0x83, 0xff,
		0xe3, 0xc3, 0x93, 0x33, 0x01, 0xf3, 0xf3, 0xff,
		0x03, 0x3f, 0x03, 0xf9, 0xf9, 0x39, 0x83, 0xff,
		0xc3, 0x9f, 0x3f, 0x03, 0x39, 0x39, 0x83, 0xff,
		0x01, 0x39, 0xf3, 0xe7, 0xcf, 0xcf, 0xcf, 0xff,
		0x87, 0x3b, 0x1b, 0x87, 0x61, 0x79, 0x83, 0xff,
		0x83, 0x39, 0x39, 0x81, 0xf9, 0xf3, 0x87, 0xff,
		0xff, 0xcf, 0xcf, 0xff, 0xcf, 0xcf, 0xff, 0xff,
		0xff, 0xcf, 0xcf, 0xff, 0xcf, 0xcf, 0x9f, 0xff,
		0xf3, 0xe7, 0xcf, 0x9f, 0xcf, 0xe7, 0xf3, 0xff,
		0xff, 0xff, 0x01, 0xff, 0x01, 0xff, 0xff, 0xff,
		0x9f, 0xcf, 0xe7, 0xf3, 0xe7, 0xcf, 0x9f, 0xff,
		0x83, 0x01, 0x39, 0xf3, 0xc7, 0xff, 0xc7, 0xff,
		0x83, 0x7d, 0x45, 0x55, 0x41, 0x7f, 0x83, 0xff,
		0xc7, 0x93, 0x39, 0x39, 0x01, 0x39, 0x39, 0xff,
		0x03, 0x39, 0x39, 0x03, 0x39, 0x39, 0x03, 0xff,
		0xc3, 0x99, 0x3f, 0x3f, 0x3f, 0x99, 0xc3, 0xff,
		0x07, 0x33, 0x39, 0x39, 0x39, 0x33, 0x07, 0xff,
		0x01, 0x3f, 0x3f, 0x03, 0x3f, 0x3f, 0x01, 0xff,
		0x01, 0x3f, 0x3f, 0x03, 0x3f, 0x3f, 0x3f, 0xff,
		0xc1, 0x9f, 0x3f, 0x31, 0x39, 0x99, 0xc1, 0xff,
		0x39, 0x39, 0x39, 0x01, 0x39, 0x39, 0x39, 0xff,
		0x81, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0x39, 0x83, 0xff,
		0x39, 0x33, 0x27, 0x0f, 0x07, 0x23, 0x31, 0xff,
		0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x81, 0xff,
		0x39, 0x11, 0x01, 0x01, 0x29, 0x39, 0x39, 0xff,
		0x39, 0x19, 0x09, 0x01, 0x21, 0x31, 0x39, 0xff,
		0x83, 0x39, 0x39, 0x39, 0x39, 0x39, 0x83, 0xff,
		0x03, 0x39, 0x39, 0x39, 0x03, 0x3f, 0x3f, 0xff,
		0x83, 0x39, 0x39, 0x39, 0x21, 0x33, 0x85, 0xff,
		0x03, 0x39, 0x39, 0x31, 0x07, 0x23, 0x31, 0xff,
		0x87, 0x33, 0x3f, 0x83, 0xf9, 0x39, 0x83, 0xff,
		0x81, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xff,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x83, 0xff,
		0x39, 0x39, 0x39, 0x11, 0x83, 0xc7, 0xef, 0xff,
		0x39, 0x39, 0x29, 0x01, 0x01, 0x11, 0x39, 0xff,
		0x39, 0x11, 0x83, 0xc7, 0x83, 0x11, 0x39, 0xff,
		0x99, 0x99, 0x99, 0xc3, 0xe7, 0xe7, 0xe7, 0xff,
		0x01, 0xf1, 0xe3, 0xc7, 0x8f, 0x1f, 0x01, 0xff,
		0xc3, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xc3, 0xff,
		0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xff,
		0x87, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0x87, 0xff,
		0xc7, 0x93, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
		0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0x83, 0xf9, 0x81, 0x39, 0x81, 0xff,
		0x3f, 0x3f, 0x03, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xff, 0xff, 0x81, 0x3f, 0x3f, 0x3f, 0x81, 0xff,
		0xf9, 0xf9, 0x81, 0x39, 0x39, 0x39, 0x81, 0xff,
		0xff, 0xff, 0x83, 0x39, 0x01, 0x3f, 0x83, 0xff,
		0xf1, 0xe7, 0x81, 0xe7, 0xe7, 0xe7, 0xe7, 0xff,
		0xff, 0xff, 0x81, 0x39, 0x39, 0x81, 0xf9, 0x83,
		0x3f, 0x3f, 0x03, 0x39, 0x39, 0x39, 0x39, 0xff,
		0xe7, 0xff, 0xc7, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0xf3, 0xff, 0xe3, 0xf3, 0xf3, 0xf3, 0xf3, 0x87,
		0x3f, 0x3f, 0x31, 0x03, 0x07, 0x23, 0x31, 0xff,
		0xc7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0xff, 0xff, 0x03, 0x49, 0x49, 0x49, 0x49, 0xff,
		0xff, 0xff, 0x03, 0x39, 0x39, 0x39, 0x39, 0xff,
		0xff, 0xff, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xff, 0xff, 0x03, 0x39, 0x39, 0x03, 0x3f, 0x3f,
		0xff, 0xff, 0x81, 0x39, 0x39, 0x81, 0xf9, 0xf9,
		0xff, 0xff, 0x91, 0x8f, 0x9f, 0x9f, 0x9f, 0xff,
		0xff, 0xff, 0x83, 0x3f, 0x83, 0xf9, 0x03, 0xff,
		0xe7, 0xe7, 0x81, 0xe7, 0xe7, 0xe7, 0xe7, 0xff,
		0xff, 0xff, 0x39, 0x39, 0x39, 0x39, 0x81, 0xff,
		0xff, 0xff, 0x99, 0x99, 0x99, 0xc3, 0xe7, 0xff,
		0xff, 0xff, 0x49, 0x49, 0x49, 0x49, 0x81, 0xff,
		0xff, 0xff, 0x39, 0x01, 0xc7, 0x01, 0x39, 0xff,
		0xff, 0xff, 0x39, 0x39, 0x39, 0x81, 0xf9, 0x83,
		0xff, 0xff, 0x01, 0xe3, 0xc7, 0x8f, 0x01, 0xff,
		0xf3, 0xe7, 0xe7, 0xcf, 0xe7, 0xe7, 0xf3, 0xff,
		0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xff,
		0x9f, 0xcf, 0xcf, 0xe7, 0xcf, 0xcf, 0x9f, 0xff,
		0xff, 0xff, 0x8f, 0x45, 0xe3, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0x93, 0x93, 0xff,
		0x83, 0x29, 0x29, 0x11, 0x29, 0x29, 0x83, 0xff,
		0x83, 0x39, 0x09, 0x11, 0x21, 0x39, 0x83, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x83, 0x11, 0x21, 0x7d, 0x21, 0x11, 0x83, 0xff,
		0x83, 0x11, 0x09, 0x7d, 0x09, 0x11, 0x83, 0xff,
		0x83, 0x11, 0x39, 0x55, 0x11, 0x11, 0x83, 0xff,
		0x83, 0x11, 0x11, 0x55, 0x39, 0x11, 0x83, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xe7, 0xff, 0xe7, 0xe7, 0xc7, 0xc7, 0xc7, 0xff,
		0xef, 0x83, 0x29, 0x2f, 0x29, 0x83, 0xef, 0xff,
		0xc3, 0x99, 0x9f, 0x03, 0x9f, 0x9f, 0x01, 0xff,
		0xff, 0xa5, 0xdb, 0xdb, 0xdb, 0xa5, 0xff, 0xff,
		0x99, 0x99, 0xc3, 0x81, 0xe7, 0x81, 0xe7, 0xff,
		0xe7, 0xe7, 0xe7, 0xff, 0xe7, 0xe7, 0xe7, 0xff,
		0xc3, 0x99, 0x87, 0xdb, 0xe1, 0x99, 0xc3, 0xff,
		0x93, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xc3, 0xbd, 0x66, 0x5e, 0x5e, 0x66, 0xbd, 0xc3,
		0x87, 0xc3, 0x93, 0xc3, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xc9, 0x93, 0x27, 0x93, 0xc9, 0xff, 0xff,
		0xff, 0xff, 0x81, 0xf9, 0xf9, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xc3, 0xbd, 0x46, 0x5a, 0x46, 0x5a, 0xbd, 0xc3,
		0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xef, 0xd7, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xe7, 0xe7, 0x81, 0xe7, 0xe7, 0xff, 0x81, 0xff,
		0xc7, 0xf3, 0xe7, 0xc3, 0xff, 0xff, 0xff, 0xff,
		0xc3, 0xe7, 0xf3, 0xc7, 0xff, 0xff, 0xff, 0xff,
		0xf7, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0x33, 0x33, 0x33, 0x33, 0x09, 0x3f,
		0xc1, 0x95, 0xb5, 0x95, 0xc1, 0xf5, 0xf5, 0xff,
		0xff, 0xff, 0xff, 0xcf, 0xcf, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xcf,
		0xe7, 0xc7, 0xe7, 0xc3, 0xff, 0xff, 0xff, 0xff,
		0xc7, 0x93, 0x93, 0xc7, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x27, 0x93, 0xc9, 0x93, 0x27, 0xff, 0xff,
		0xbd, 0x3b, 0xb7, 0xad, 0xd9, 0xb1, 0x7d, 0xff,
		0xbd, 0x3b, 0xb7, 0xa9, 0xdd, 0xbb, 0x71, 0xff,
		0x1d, 0xbb, 0xd7, 0x2d, 0xd9, 0xb1, 0x7d, 0xff,
		0xc7, 0xff, 0xc7, 0x9f, 0x39, 0x01, 0x83, 0xff,
		0xdf, 0xef, 0xc7, 0x93, 0x39, 0x01, 0x39, 0xff,
		0xf7, 0xef, 0xc7, 0x93, 0x39, 0x01, 0x39, 0xff,
		0xc7, 0x93, 0xc7, 0x93, 0x39, 0x01, 0x39, 0xff,
		0xcb, 0xa7, 0xc7, 0x93, 0x39, 0x01, 0x39, 0xff,
		0x93, 0xff, 0xc7, 0x93, 0x39, 0x01, 0x39, 0xff,
		0xef, 0xd7, 0xc7, 0x93, 0x39, 0x01, 0x39, 0xff,
		0xc1, 0x87, 0x27, 0x21, 0x07, 0x27, 0x21, 0xff,
		0xc3, 0x99, 0x3f, 0x3f, 0x99, 0xc3, 0xf7, 0xcf,
		0xdf, 0xef, 0x01, 0x3f, 0x03, 0x3f, 0x01, 0xff,
		0xf7, 0xef, 0x01, 0x3f, 0x03, 0x3f, 0x01, 0xff,
		0xc7, 0x93, 0x01, 0x3f, 0x03, 0x3f, 0x01, 0xff,
		0x93, 0xff, 0x01, 0x3f, 0x03, 0x3f, 0x01, 0xff,
		0xef, 0xf7, 0x81, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0xf7, 0xef, 0x81, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0xe7, 0xc3, 0x81, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0x99, 0xff, 0x81, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0x87, 0x93, 0x99, 0x09, 0x99, 0x93, 0x87, 0xff,
		0xcb, 0xa7, 0x19, 0x09, 0x01, 0x21, 0x31, 0xff,
		0xdf, 0xef, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xf7, 0xef, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xc7, 0x93, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xcb, 0xa7, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0x93, 0xff, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xff, 0xbb, 0xd7, 0xef, 0xd7, 0xbb, 0xff, 0xff,
		0x83, 0x39, 0x31, 0x29, 0x19, 0x39, 0x83, 0xff,
		0xdf, 0xef, 0x39, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xf7, 0xef, 0x39, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xc7, 0x93, 0xff, 0x39, 0x39, 0x39, 0x83, 0xff,
		0x93, 0xff, 0x39, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xf7, 0xef, 0x99, 0x99, 0xc3, 0xe7, 0xe7, 0xff,
		0x3f, 0x03, 0x39, 0x39, 0x39, 0x03, 0x3f, 0xff,
		0xc3, 0x99, 0x99, 0x93, 0x99, 0x89, 0x93, 0xff,
		0xdf, 0xef, 0x83, 0xf9, 0x81, 0x39, 0x81, 0xff,
		0xf7, 0xef, 0x83, 0xf9, 0x81, 0x39, 0x81, 0xff,
		0xc7, 0x93, 0x83, 0xf9, 0x81, 0x39, 0x81, 0xff,
		0xcb, 0xa7, 0x83, 0xf9, 0x81, 0x39, 0x81, 0xff,
		0x93, 0xff, 0x83, 0xf9, 0x81, 0x39, 0x81, 0xff,
		0xef, 0xd7, 0x83, 0xf9, 0x81, 0x39, 0x81, 0xff,
		0xff, 0xff, 0x83, 0xe9, 0x81, 0x2f, 0x83, 0xff,
		0xff, 0xff, 0x81, 0x3f, 0x3f, 0x81, 0xf7, 0xcf,
		0xdf, 0xef, 0x83, 0x39, 0x01, 0x3f, 0x83, 0xff,
		0xf7, 0xef, 0x83, 0x39, 0x01, 0x3f, 0x83, 0xff,
		0xc7, 0x93, 0x83, 0x39, 0x01, 0x3f, 0x83, 0xff,
		0x93, 0xff, 0x83, 0x39, 0x01, 0x3f, 0x83, 0xff,
		0xdf, 0xef, 0xff, 0xc7, 0xe7, 0xe7, 0x81, 0xff,
		0xf7, 0xef, 0xff, 0xc7, 0xe7, 0xe7, 0x81, 0xff,
		0xc7, 0x93, 0xff, 0xc7, 0xe7, 0xe7, 0x81, 0xff,
		0x93, 0xff, 0xc7, 0xe7, 0xe7, 0xe7, 0x81, 0xff,
		0x9b, 0x87, 0x67, 0x83, 0x39, 0x39, 0x83, 0xff,
		0xcb, 0xa7, 0x03, 0x39, 0x39, 0x39, 0x39, 0xff,
		0xdf, 0xef, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xf7, 0xef, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xc7, 0x93, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xcb, 0xa7, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0x93, 0xff, 0x83, 0x39, 0x39, 0x39, 0x83, 0xff,
		0xff, 0xe7, 0xff, 0x81, 0xff, 0xe7, 0xff, 0xff,
		0xff, 0xff, 0x83, 0x31, 0x29, 0x19, 0x83, 0xff,
		0xdf, 0xef, 0x39, 0x39, 0x39, 0x39, 0x81, 0xff,
		0xf7, 0xef, 0x39, 0x39, 0x39, 0x39, 0x81, 0xff,
		0xc7, 0x93, 0xff, 0x39, 0x39, 0x39, 0x81, 0xff,
		0x93, 0xff, 0x39, 0x39, 0x39, 0x39, 0x81, 0xff,
		0xf7, 0xef, 0x39, 0x39, 0x39, 0x81, 0xf9, 0x83,
		0x3f, 0x3f, 0x03, 0x39, 0x39, 0x03, 0x3f, 0x3f,
		0x93, 0xff, 0x39, 0x39, 0x39, 0x81, 0xf9, 0x83
	];
}
